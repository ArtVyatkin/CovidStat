import streamlit as st
import pandas as pd
import statsmodels.api as sm
from datetime import datetime, timedelta


def date_to_datetime(current_date):
    return datetime.combine(current_date, datetime.min.time())


def display_title(text, level=1):
    st.markdown(
        f"""
        <h{level} style='text-align: center'>
            {text}
        </h{level}>
        """,
        unsafe_allow_html=True,
    )


def display_reflections():
    with st.expander("–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –≤—ã–±–∏—Ä–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"):
        st.markdown("**1 –º–∞—è**. –ú–Ω–æ–≥–æ –ª—é–¥–µ–π —Å–æ–±—Ä–∞–ª–∏—Å—å –≤–º–µ—Å—Ç–µ ‚Üí –º–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö")
        st.markdown(
            "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∏–±–æ–ª–µ–µ **—É—è–∑–≤–∏–º—ã –¥–ª—è —Å–º–µ—Ä—Ç–∏**, \
            –ø–æ–≥–∏–±–∞—é—Ç **–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ** (—É—Å–ª–æ–≤–Ω–æ ‚Äî 1 –Ω–µ–¥–µ–ª—è), \
            –Ω–æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (–∫ –ø—Ä–∏–º–µ—Ä—É, —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏)"
        )
        st.markdown("**7 –º–∞—è**. –ü—É—Å—Ç—å –∫ —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ª—é–¥–∏ —Ä–µ—à–∏–ª–∏ —Å–∏–¥–µ—Ç—å –¥–æ–º–∞ ‚Üí **–º–∞–ª–æ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö**.")
        st.markdown(
            "–ß—Ç–æ –≤ –∏—Ç–æ–≥–µ? –ù–∞ 7 –º–∞—è –º–Ω–æ–≥–æ –ø–æ–≥–∏–±—à–∏—Ö, –Ω–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö –∏ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö ‚Äî –º–∞–ª–æ. \
        **–ì–æ–≤–æ—Ä–∏—Ç –ª–∏ —ç—Ç–æ –æ –≤—ã—Å–æ–∫–æ–π –ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç–∏? –ù–µ—Ç**, —Ç–∞–∫ –∫–∞–∫ —É—á–∏—Ç—ã–≤–∞–ª–∏—Å—å —Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏, –∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö, \
        –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–ª–∏ 1 –º–∞—è –Ω–∞—á–Ω–∏—É—Ç—å –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞—Ç—å –≥–æ—Ä–∞–∑–¥–æ –ø–æ–∑–∂–µ, –∏ —Å–µ–π—á–∞—Å –∏—Ö –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —É—á–µ—Å—Ç—å. \
        –ü–æ—ç—Ç–æ–º—É –±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –Ω–µ —Å–æ–≤—Å–µ–º —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ ‚Äî **–ª—É—á—à–µ –±—Ä–∞—Ç—å –∑–∞ –±–æ–ª–µ–µ –¥–æ–ª–≥–∏–π –ø–µ—Ä–∏–æ–¥**."
        )


POPULATION = {
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 5384342,
    "–ú–æ—Å–∫–≤–∞": 12655050,
}

OPTIONS_TO_COLUMN_NAMES = {
    "–°–º–µ—Ä—Ç–∏": "–°–º–µ—Ä—Ç–µ–π –∑–∞ –¥–µ–Ω—å",
    "–ó–∞—Ä–∞–∂–µ–Ω–∏—è": "–ó–∞—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å",
    "–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è": "–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å",
}


def get_total_number_from_options(options, region_data):
    try:
        return sum(
            list(
                map(
                    lambda x: POPULATION[region_data["–†–µ–≥–∏–æ–Ω"].iloc[0]]
                    if x == "–ù–∞—Å–µ–ª–µ–Ω–∏–µ"
                    else region_data[OPTIONS_TO_COLUMN_NAMES[x]].sum(),
                    options,
                )
            )
        )
    except KeyError:
        st.error(f"–î–ª—è —Ä–µ–≥–∏–æ–Ω–∞ \"{region_data['–†–µ–≥–∏–æ–Ω'].iloc[0]}\" –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
        return 0


def display_result(significance_level, p_value):
    if p_value >= significance_level:
        st.markdown(
            fr"${p_value} \geq \alpha={significance_level} \Rightarrow$ –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –¥–æ–ª–µ–π –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è"
        )
    else:
        st.markdown(fr"${p_value} < \alpha={significance_level} \Rightarrow$ –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –¥–æ–ª–µ–π –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è")


def main():
    display_title("A/B –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ<h1 style='text-align: center'>–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π</h1>")
    display_title("üò∑ Covid –≤ –†–æ—Å—Å–∏–∏", 2)
    display_title("–î–∞–Ω–Ω—ã–µ –Ω–∞ 29 –æ–∫—Ç—è–±—Ä—è 2021", 5)

    display_reflections()

    covid_russia = pd.read_csv("russia_covid.csv")
    covid_russia["–î–∞—Ç–∞"] = pd.to_datetime(covid_russia["–î–∞—Ç–∞"], format="%d.%m.%Y")

    regions = tuple(covid_russia["–†–µ–≥–∏–æ–Ω"].unique())
    city_col1, city_col2 = st.columns(2)

    # –¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª., –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª.
    first_region = city_col1.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞", regions, index=regions.index("–ú–æ—Å–∫–≤–∞"))
    second_region = city_col2.selectbox("", regions, index=regions.index("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"))
    min_date = date_to_datetime(covid_russia["–î–∞—Ç–∞"].min().date())
    max_date = date_to_datetime(covid_russia["–î–∞—Ç–∞"].max().date())
    initial_start_date = max_date - timedelta(days=14)

    date_col1, date_col2 = st.columns(2)
    start_date = date_to_datetime(
        date_col1.date_input(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞", value=initial_start_date, min_value=min_date, max_value=max_date
        )
    )
    timedelta_as_days = date_col2.number_input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ", value=14, min_value=1, format="%i") - 1
    final_date = start_date + timedelta(days=timedelta_as_days)
    if final_date > max_date:
        st.error("–î–ª—è —á–∞—Å—Ç–∏ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–º–µ–Ω—å—à–µ.")
    else:
        success_options = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ —á–∏—Å–ª–æ "—É—Å–ø–µ—Ö–æ–≤" (–±—É–¥–µ—Ç —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞ –ø–µ—Ä–æ–∏–¥)',
            list(OPTIONS_TO_COLUMN_NAMES),
            default=["–°–º–µ—Ä—Ç–∏"],
        )
        total_number_of_tests_options = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ –æ–±—â–µ–µ —á–∏—Å–ª–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–±—É–¥–µ—Ç —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞ –ø–µ—Ä–æ–∏–¥)",
            list(OPTIONS_TO_COLUMN_NAMES) + ["–ù–∞—Å–µ–ª–µ–Ω–∏–µ"],
            default=["–ó–∞—Ä–∞–∂–µ–Ω–∏—è"],
        )

        significance_levels = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏", [0.001, 0.01, 0.05], default=[0.001, 0.01, 0.05]
        )

        first_region_data = covid_russia[
            (covid_russia["–†–µ–≥–∏–æ–Ω"] == first_region) & (covid_russia["–î–∞—Ç–∞"].between(start_date, final_date))
        ]
        second_region_data = covid_russia[
            (covid_russia["–†–µ–≥–∏–æ–Ω"] == second_region) & (covid_russia["–î–∞—Ç–∞"].between(start_date, final_date))
        ]

        first_success_number = get_total_number_from_options(success_options, first_region_data)
        second_success_number = get_total_number_from_options(success_options, second_region_data)
        first_total_number = get_total_number_from_options(total_number_of_tests_options, first_region_data)
        second_total_number = get_total_number_from_options(total_number_of_tests_options, second_region_data)

        display_title("–†–µ–∑—É–ª—å—Ç–∞—Ç", 2)
        z_label, p_value = sm.stats.proportions_ztest(
            [first_success_number, second_success_number], [first_total_number, second_total_number]
        )

        total_numbers = pd.DataFrame.from_dict(
            {
                first_region: [
                    first_success_number,
                    first_total_number,
                    first_success_number / first_total_number * 100,
                ],
                second_region: [
                    second_success_number,
                    second_total_number,
                    second_success_number / second_total_number * 100,
                ],
            },
            orient="index",
            columns=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "—É—Å–ø–µ—Ö–æ–≤"', "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", '–ü—Ä–æ—Ü–µ–Ω—Ç "—É—Å–ø–µ—Ö–æ–≤"'],
        )
        st.dataframe(total_numbers)

        st.markdown(f"**Z-–º–µ—Ç–∫–∞**: $\; {z_label}$")
        st.markdown(f"**P-value**: $\; {p_value}$")

        for significance_level in significance_levels:
            display_result(float(significance_level), p_value)


if __name__ == "__main__":
    main()
